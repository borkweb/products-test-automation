#!/usr/bin/env php
<?php
// Requires the function files we might need.
require_once __DIR__ . '/setup/src/utils.php';
require_once __DIR__ . '/setup/src/pue.php';
require_once __DIR__ . '/setup/src/plugins.php';
require_once __DIR__ . '/setup/src/nightly.php';
require_once __DIR__ . '/setup/src/tric.php';
require_once __DIR__ . '/setup/docker.php';
require_once __DIR__ . '/setup/wordpress.php';
require_once __DIR__ . '/setup/shell.php';


use function Tribe\Test\args;
use function Tribe\Test\check_status_or_exit;
use function Tribe\Test\colorize;
use function Tribe\Test\docker_compose;
use function Tribe\Test\docker_compose_realtime;
use function Tribe\Test\ensure_dev_plugin;
use function Tribe\Test\light_cyan;
use function Tribe\Test\red;
use function Tribe\Test\setup_id;
use function Tribe\Test\setup_tric_env;
use function Tribe\Test\stack;
use function Tribe\Test\tric_target;
use function Tribe\Test\write_env_file;

// Set up the argument parsing function.
$args = args( [
	'subcommand',
	'...',
] );

$cli_name = basename( $argv[0] );
const CLI_VERSION = '0.0.1';

$cli_header = implode( ' - ', [
	light_cyan( $cli_name ) . ' version ' . light_cyan( CLI_VERSION ),
	light_cyan( 'Modern Tribe local testing and development tool' )
] );

echo $cli_header . PHP_EOL . PHP_EOL;

setup_tric_env( __DIR__ );

$help_message_template = <<< HELP
Available commands:
	<light_cyan>help</light_cyan>         Displays this help message.
	<light_cyan>use</light_cyan>          Sets the plugin to use in the tests.
	<light_cyan>run</light_cyan>          Runs a Codeception test in the stack, the equivalent of <light_cyan>'codecept run ...'</light_cyan>.
	<light_cyan>cc</light_cyan>           Runs a Codeception command in the stack, the equivalent of <light_cyan>'codecept ...'</light_cyan>.
	<light_cyan>shell</light_cyan>        Opens a shell in the Codeception container of the stack.
	<light_cyan>xdebug</light_cyan>       Activates and deactivated XDebug in the stack.
	<light_cyan>cli</light_cyan>          Runs a wp-cli command in the stack.
	<light_cyan>serve</light_cyan>        Starts the stack and serves it on localhost.
	<light_cyan>composer</light_cyan>     Runs a Composer command in the stack.
	<light_cyan>logs</light_cyan>         Displays the current stack logs.
	<light_cyan>down</light_cyan>         Tears down the stack, stopping containers and removing volumes.
	<light_cyan>config</light_cyan>       Prints the stack configuration as interpolated from the environment.
	<light_cyan>reset</light_cyan>        Resets {$cli_name} to the initial state as configured by the env files.
	<light_cyan>debug</light_cyan>        Activates or deactivates {$cli_name} debug output.

HELP;

$help_message = colorize( $help_message_template );

$is_help = args( [ 'help' ], $args( '...' ), 0 )( 'help', false ) === 'help';

$run_settings_file = __DIR__ . '/.env.tric.run';

switch ( $args( 'subcommand', 'help' ) ) {
	default:
	case 'help':
		echo $help_message;
		break;
	case 'run':
		if ( $is_help ) {
			echo colorize( "Runs a Codeception test in the stack, the equivalent of <light_cyan>'codecept run ...'</light_cyan>.\n" );
			echo colorize( "This command requires a  set using the <light_cyan>use</light_cyan> command.\n" );
			echo colorize( "usage: <light_cyan>${argv[0]} run [...<commands>]</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} run wpunit</light_cyan>" );
			break;
		}

		$using = tric_target();
		echo light_cyan( "Using {$using}\n" );

		setup_id();
		// Run the command in the Codeception container, exit the same status as the process.
		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$status        = $tric_realtime( array_merge( [ 'run', '--rm', 'codeception', 'run' ], $args( '...' ) ) );
		exit( 0 );
		break;
	case 'cc':
		if ( $is_help ) {
			echo "Runs a Codeception command in the stack, the equivalent of <light_cyan>'codecept ...'</light_cyan>.\n";
			echo colorize( "This command requires a  set using the <light_cyan>use</light_cyan> command.\n" );
			echo colorize( "usage: <light_cyan>${argv[0]} cc [...<commands>]</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} cc generate:wpunit wpunit Foo</light_cyan>" );
			break;
		}

		$using = tric_target();
		echo light_cyan( "Using {$using}\n" );

		setup_id();
		// Run the command in the Codeception container, exit the same status as the process.
		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$status        = $tric_realtime( array_merge( [ 'run', '--rm', 'codeception' ], $args( '...' ) ) );
		exit( 0 );
		break;
	case 'shell':
		if ( $is_help ) {
			echo "Opens a shell in the Codeception container of the stack.\n";
			echo colorize( "This command requires a  set using the <light_cyan>use</light_cyan> command.\n" );
			echo colorize( "usage: <light_cyan>${argv[0]} shell</light_cyan>\n" );
			break;
		}

		$using = tric_target();
		echo light_cyan( "Using {$using}\n" );

		setup_id();
		// Run the command in the Codeception container, exit the same status as the process.
		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$shell_args    = array_merge( [ 'run', '--rm', '--entrypoint', 'bash', 'codeception' ], $args( '...' ) );
		$status        = $tric_realtime( $shell_args );
		exit( 0 );
		break;
	case 'cli':
		if ( $is_help ) {
			echo "Runs a wp-cli command in the stack.\n";
			echo colorize( "signature: <light_cyan>${argv[0]} cli [...<commands>]</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} cli plugin list --status=active</light_cyan>" );
			break;
		}

		setup_id();
		// Runs a wp-cli command in the stack, using the `cli` service.
		$composer_command = $args( '...' );
		$tric_realtime    = docker_compose_realtime( [ '-f', stack() ] );
		$tric_realtime( array_merge( [ 'run', '--rm', 'cli', 'wp' ], $composer_command ) );
		break;
	case 'serve':
		if ( $is_help ) {
			echo "Starts the stack and serves it on http://localhost\n";
			echo colorize( "usage: <light_cyan>${argv[0]} serve [<port>]</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} serve 8923</light_cyan>" );
			break;
		}

		setup_id();
		$sub_args = args( [ 'port' ], $args( '...' ), 0 );
		$port     = $sub_args( 'port', '8888' );
		putenv( 'WORDPRESS_HTTP_PORT=' . $port );
		$tric = docker_compose( [ '-f', stack() ] );
		check_status_or_exit( $tric( [ 'up', '-d', 'wordpress' ] ) );
		check_status_or_exit(
			$tric( [ 'run', '--rm', 'site_waiter' ] ),
			red( "WordPress site is not available at http://localhost:" . $port
			     . "; please check the container health." )
		);
		echo light_cyan( "WordPress site up and running at http://localhost:{$port}\n" );
		break;
	case 'logs':
		if ( $is_help ) {
			echo "Displays the stack logs.\n";
			echo colorize( "usage: <light_cyan>${argv[0]} logs</light_cyan>" );
			break;
		}

		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$tric_realtime( [ 'logs', '--follow' ] );
		break;
	case 'down':
		if ( $is_help ) {
			echo "Tears down the stack, stopping containers and removing volumes.\n";
			echo colorize( "usage: <light_cyan>${argv[0]} down</light_cyan>" );
			break;
		}

		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$tric_realtime( [ 'down' ] );
		break;
	case 'use':
		if ( $is_help ) {
			echo "Sets the plugin to use in the tests.\n";
			echo colorize( "signature: <light_cyan>${argv[0]} use <target></light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} use the-events-calendar</light_cyan>" );
			break;
		}

		$sub_args = args( [ 'target' ], $args( '...' ), 0 );
		$target   = $sub_args( 'target', false );
		ensure_dev_plugin( $target );
		write_env_file( $run_settings_file, [ 'TRIC_CURRENT_PROJECT' => $target ], true );

		echo light_cyan( "Using {$target}\n" );
		break;
	case 'xdebug':
		if ( $is_help ) {
			echo "Activates and deactivates the XDebug in the stack.\n";
			echo colorize( "signature: <light_cyan>${argv[0]} xdebug (on|off)</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} xdebug on</light_cyan>" );
			break;
		}

		$toggle = args( [ 'toggle' ], $args( '...' ), 0 )( 'toggle', 'on' );
		$value  = 'on' === $toggle ? '1' : '0';
		write_env_file( $run_settings_file, [ 'XDE' => $value ], true );
		echo 'XDebug status: ' . ( $value ? light_cyan( 'on' ) : red( 'off' ) );
		break;
	case 'composer':
		if ( $is_help ) {
			echo "Runs a Composer command in the stack.\n";
			echo colorize( "This command requires a use target set using the <light_cyan>use</light_cyan> command.\n" );
			echo colorize( "usage: <light_cyan>${argv[0]} composer [...<commands>]</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} composer install</light_cyan>" );
			break;
		}

		$using = tric_target();
		echo light_cyan( "Using {$using}\n" );

		setup_id();
		$composer_command = $args( '...' );
		$tric_realtime    = docker_compose_realtime( [ '-f', stack() ] );
		$tric_realtime( array_merge( [ 'run', '--rm', 'composer' ], $composer_command ) );
		break;
	case 'config':
		if ( $is_help ) {
			echo "Prints the stack configuration as interpolated from the environment.\n";
			echo colorize( "usage: <light_cyan>${argv[0]} config</light_cyan>" );
			break;
		}

		$using = tric_target();
		setup_id();
		$tric_realtime = docker_compose_realtime( [ '-f', stack() ] );
		$tric_realtime( [ 'config' ] );
		break;
	case 'reset':
		if ( $is_help ) {
			echo "Resets the tool to its initial state configured by the env files.\n";
			echo colorize( "usage: <light_cyan>${argv[0]} reset</light_cyan>" );
			break;
		}

		if ( ! file_exists( $run_settings_file ) ) {
			echo light_cyan( 'Done' );
			break;
		}

		$removed = unlink( $run_settings_file );

		if ( false === $removed ) {
			echo red( "Could not remove the {$run_settings_file} file; remove it manually.\n" );
			exit( 1 );
		}

		echo light_cyan( 'Done' );

		break;
	case 'debug':
		if ( $is_help ) {
			echo "Activates or deactivates {$cli_name} debug output.\n";
			echo colorize( "signature: <light_cyan>${argv[0]} debug (on|off)</light_cyan>\n" );
			echo colorize( "example: <light_cyan>${argv[0]} debug on</light_cyan>" );
			break;
		}

		$toggle = args( [ 'toggle' ], $args( '...' ), 0 )( 'toggle', 'on' );
		$value  = 'on' === $toggle ? '1' : '0';
		write_env_file( $run_settings_file, [ 'CLI_VERBOSITY' => $value ], true );
		echo 'Debug status: ' . ( $value ? light_cyan( 'on' ) : red( 'off' ) );
		break;
}

// Add a break line at the end of each command to avoid dirty terminal issues.
echo "\n";
